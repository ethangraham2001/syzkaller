// Copyright 2025 syzkaller project authors. All rights reserved.
// Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.
package main

import (
	"context"
	"flag"
	"fmt"
	"os"
	"os/signal"
	"syscall"

	"github.com/google/syzkaller/pkg/kfuzztest"
	"github.com/google/syzkaller/pkg/log"
)

var (
	flagExtractOnly     = flag.Bool("extract-only", false, "Extract KFuzzTest targets from vmlinux and display their descriptions")
	flagVmlinux         = flag.String("vmlinux", "", "Path to vmlinux binary")
	flagTimeout         = flag.Int("timeout", 0, "Timeout in milliseconds")
	flagThreads         = flag.Int("threads", 1, "Number of threads")
	flagDisplayInterval = flag.Int("display", 5, "Display interval")
	flagDisplayProgs    = flag.Bool("display-progs", false, "Display last executed prog for each target")
	flagEnableTarget    arrayFlags
)

func main() {
	flag.Var(&flagEnableTarget, "enable", "Enables a KFuzzTest target. When empty, enables all KFuzzTest targets")
	flag.Parse()

	// Extract-only mode used for validation of generated descriptions before fuzzing.
	if *flagExtractOnly {
		log.Log(0, "extracting syzlang description for KFuzzTest targets")
		desc, err := kfuzztest.ExtractDescription(*flagVmlinux)
		if err != nil {
			log.Fatal(err)
		}

		fmt.Println("# Auto-generated by syz-kfuzztest")
		fmt.Println(desc)
		log.Log(0, "\ndone.")
		return
	}

	cfg := config{
		vmlinuxPath:         *flagVmlinux,
		timeoutMilliseconds: uint32(*flagTimeout),
		displayInterval:     uint32(*flagDisplayInterval),
		numThreads:          *flagThreads,
		enabledTargets:      flagEnableTarget,
	}

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	signalChan := make(chan os.Signal, 1)
	signal.Notify(signalChan, syscall.SIGINT, syscall.SIGTERM)
	go func() {
		<-signalChan
		log.Logf(0, "shutting down")
		cancel()
	}()

	mgr, err := newKFuzzTestManager(ctx, cfg)
	if err != nil {
		panic(err)
	}
	mgr.Run()
}

type arrayFlags []string

// String is an implementation of the flag.Value interface
func (i *arrayFlags) String() string {
	return fmt.Sprintf("%v", *i)
}

// Set is an implementation of the flag.Value interface
func (i *arrayFlags) Set(value string) error {
	*i = append(*i, value)
	return nil
}
